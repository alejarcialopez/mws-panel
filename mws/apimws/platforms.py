from __future__ import absolute_import
from celery import shared_task, Task
import json
from django.core.mail import send_mail
import os
import random
import string
import crypt
from django.conf import settings
import requests
import platform
from sitesmanagement.models import VirtualMachine, NetworkConfig


class PlatformsAPINotWorkingException(Exception):
    pass


class PlatformsAPIInputException(Exception):
    pass


def get_api_secret():
    if platform.system() == 'Darwin':
        from passlib.hash import sha512_crypt
        return sha512_crypt.encrypt(settings.PLATFORMS_API_TOKEN, rounds=5000,
                                    implicit_rounds=True)  # Salt autogenerated
    return crypt.crypt(settings.PLATFORMS_API_TOKEN, "$6$"+''.join(random.sample(string.hexdigits, 16)))


def get_api_username():
    return settings.PLATFORMS_API_USERNAME


class TaskWithFailure(Task):
    abstract = True

    def on_failure(self, exc, task_id, args, kwargs, einfo):
        subject = "MWS3: Platform's VM API ERROR"
        message = "An error happened when trying to communicate with Platform's VM API.\n The task id is " \
                  "%s. \n\n The parameters passed to the task were: %s \n\n " \
                  "The traceback is: \n %s" % (task_id, args, einfo)
        from_email = "mws3-support@cam.ac.uk"
        recipient_list = ("amc203@cam.ac.uk", )
        send_mail(subject, message, from_email, recipient_list, fail_silently=False)


@shared_task(base=TaskWithFailure, default_retry_delay=5*60, max_retries=288) # Retry each 5 minutes for 24 hours
def new_site_primary_vm(vm):
    json_object = {
        'username': get_api_username(),
        'secret': get_api_secret(),
        'command': 'create',
        'ip': vm.ipv4,
        'hostname': vm.hostname,
    }
    headers = {'Content-type': 'application/json'}
    try:
        response = json.loads(requests.post("https://bes.csi.cam.ac.uk/mws-api/v1/vm.json",
                                            data=json.dumps(json_object), headers=headers).text)
    except Exception as e:
        print "An error happened1!"
        raise new_site_primary_vm.retry(exc=e)

    if response['result'] == 'Success':
        vm.name = response['vmid']
        vm.status = 'ready'
        vm.save()
        return install_vm(vm)
    else:
        return False  # TODO raise error


@shared_task(base=TaskWithFailure, default_retry_delay=5*60, max_retries=288) # Retry each 5 minutes for 24 hours
def install_vm(vm):
    f = open(os.path.join(settings.BASE_DIR, 'apimws/ubuntu_preseed.txt'), 'r')
    profile = f.read()
    f.close()

    json_object = {
        'username': get_api_username(),
        'secret': get_api_secret(),
        'command': 'install',
        'vmid': vm.name,
        'profile': profile,
    }
    headers = {'Content-type': 'application/json'}
    try:
        response = json.loads(requests.post("https://bes.csi.cam.ac.uk/mws-api/v1/vm.json",
                                            data=json.dumps(json_object), headers=headers).text)
    except Exception as e:
        raise PlatformsAPINotWorkingException(e.message)  # TODO capture exception where it is called

    if response['result'] == 'Success':
        return True
    else:
        return False  # TODO raise error


def get_vm_power_state(vm):
    json_object = {
        'username': get_api_username(),
        'secret': get_api_secret(),
        'command': 'get power state',
        'vmid': vm.name
    }
    headers = {'Content-type': 'application/json'}
    try:
        response = json.loads(requests.post("https://bes.csi.cam.ac.uk/mws-api/v1/vm.json",
                                            data=json.dumps(json_object), headers=headers).text)
    except Exception as e:
        raise PlatformsAPINotWorkingException(e.message)

    if response['result'] == 'Success':
        if response['powerState'] == 'poweredOff':
            return "Off"
        elif response['powerState'] == 'poweredOn':
            return "On"
        else:
            pass  # TODO raise error
    else:
        pass  # TODO raise error


@shared_task(base=TaskWithFailure, default_retry_delay=5*60, max_retries=288) # Retry each 5 minutes for 24 hours
def change_vm_power_state(vm, on):
    if on != 'on' and on != 'off':
        raise PlatformsAPIInputException("passed wrong parameter power %s" % on)

    json_object = {
        'username': get_api_username(),
        'secret': get_api_secret(),
        'command': 'power '+on,
        'vmid': vm.name
    }

    headers = {'Content-type': 'application/json'}
    try:
        response = json.loads(requests.post("https://bes.csi.cam.ac.uk/mws-api/v1/vm.json",
                                            data=json.dumps(json_object), headers=headers).text)
    except Exception as e:
        raise PlatformsAPINotWorkingException(e.message)  # TODO capture exception where it is called

    if response['result'] == 'Success':
        return True
    else:
        return False  # TODO raise error


@shared_task(base=TaskWithFailure, default_retry_delay=5*60, max_retries=288) # Retry each 5 minutes for 24 hours
def reset_vm(vm):
    json_object = {
        'username': get_api_username(),
        'secret': get_api_secret(),
        'command': 'reset',
        'vmid': vm.name
    }

    headers = {'Content-type': 'application/json'}
    r = requests.post("https://bes.csi.cam.ac.uk/mws-api/v1/vm.json", data=json.dumps(json_object), headers=headers)
    try:
        response = json.loads(r.text)
    except Exception as e:
        raise PlatformsAPINotWorkingException(e.message)  # TODO capture exception where it is called

    if response['result'] == 'Success':
        return True
    else:
        return False  # TODO raise error


@shared_task(base=TaskWithFailure, default_retry_delay=5*60, max_retries=288) # Retry each 5 minutes for 24 hours
def destroy_vm(vm):
    change_vm_power_state(vm, "off")

    json_object = {
        'username': get_api_username(),
        'secret': get_api_secret(),
        'command': 'destroy',
        'vmid': vm.name
    }

    headers = {'Content-type': 'application/json'}
    r = requests.post("https://bes.csi.cam.ac.uk/mws-api/v1/vm.json", data=json.dumps(json_object), headers=headers)
    try:
        response = json.loads(r.text)
    except Exception as e:
        raise PlatformsAPINotWorkingException(e.message)  # TODO capture exception where it is called

    if response['result'] == 'Success':
        return True
    else:
        raise PlatformsAPINotWorkingException()  # TODO capture exception where it is called


def clone_vm(site, primary_vm):
    if primary_vm:
        original_vm = site.primary_vm
        if site.secondary_vm:
            site.secondary_vm.delete()
    else:
        original_vm = site.secondary_vm
        if site.primary_vm:
            site.primary_vm.delete()

    destination_vm = VirtualMachine.objects.create(primary=(not primary_vm), status='requested', site=site)
    clone_vm_api_call.delay(original_vm, destination_vm)


@shared_task(base=TaskWithFailure, default_retry_delay=5*60, max_retries=288) # Retry each 5 minutes for 24 hours
def clone_vm_api_call(orignal_vm, destiantion_vm):
    json_object = {
        'username': get_api_username(),
        'secret': get_api_secret(),
        'command': 'clone',
        'vmid': orignal_vm.name,
        'ip': destiantion_vm.ipv4,
        'hostname': destiantion_vm.hostname,
    }
    headers = {'Content-type': 'application/json'}
    try:
        response = json.loads(requests.post("https://bes.csi.cam.ac.uk/mws-api/v1/vm.json",
                                            data=json.dumps(json_object), headers=headers).text)
    except Exception as e:
        raise PlatformsAPINotWorkingException(e.message)  # TODO capture exception where it is called

    if response['result'] == 'Success':
        destiantion_vm.name = response['vmid']
        destiantion_vm.status = 'ready'
        destiantion_vm.save()
        return True
    else:
        return False  # TODO raise error